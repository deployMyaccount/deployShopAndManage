name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # Step 1: Run tests in docker-compose environment
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create .env file
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
          echo "PGP_URL=${{ secrets.PGP_URL }}" >> .env
          echo "PGP_URL_ADMIN=${{ secrets.PGP_URL_ADMIN }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "CLOUD_NAME=${{ secrets.CLOUD_NAME }}" >> .env
          echo "CLOUD_API_KEY=${{ secrets.CLOUD_API_KEY }}" >> .env
          echo "CLOUD_API_SECRET=${{ secrets.CLOUD_API_SECRET }}" >> .env
          echo "ORIGIN_URL=${{ secrets.ORIGIN_URL }}" >> .env

      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.yml up --abort-on-container-exit --exit-code-from ui-tests
        continue-on-error: true

      - name: Copy test results from container
        run: docker cp ui-tests-container:/app/test-results.txt ./test-results.txt

      - name: Parse test results
        id: parse-test-results
        run: |
          # Анализируем результаты тестов
          results=$(cat test-results.txt)
          unexpected=$(echo "$results" | grep -oP '"unexpected": \K\d+')
          echo "Unexpected tests: $unexpected"
          echo "unexpected=$unexpected" >> $GITHUB_ENV
          echo "::set-output name=unexpected::$unexpected"

          # Считаем количество неожиданных тестов
          test_failures=$(echo "$results" | grep -oP '"unexpected": \K\d+')
          echo "Failed tests: $test_failures"

          # Условие для остановки пайплайна
          if [ "$test_failures" -gt 5 ]; then
            echo "Too many tests failed ($test_failures). Stopping pipeline."
            exit 1
          fi

  # Step 2: Build and push frontend image
  build:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ success() || failure() }} && steps.parse-test-results.outputs.unexpected <= 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build frontend image
        run: docker build -t itqa47/frontend:latest ./frontend

      - name: Push frontend image to Docker Hub
        run: docker push itqa47/frontend:latest

  # Step 3: Deploy to Render
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy to Render
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
                "serviceId": "srv-cs9bl5aj1k6c73flgcdg",
                "branch": "main"
              }' \
          https://api.render.com/v1/services/srv-cs9bl5aj1k6c73flgcdg/deploys

      - name: Wait for deployment to complete
        run: |
            deploy_info=$(curl -s -X GET \
                -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
                https://api.render.com/v1/services/srv-cs9bl5aj1k6c73flgcdg/deploys)

      - name: Wait for deployment to complete
        id: check-deploy-status
        run: |
          for i in {1..10}; do
            deploy_info=$(curl -s -X GET \
                -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
                https://api.render.com/v1/services/srv-cs9bl5aj1k6c73flgcdg/deploys)
            
            latest_status=$(echo $deploy_info | jq -r '.[0].deploy.status')
            
            echo "Latest deploy status: $latest_status"
            
            if [ "$latest_status" == "live" ]; then
                echo "Deploy was successful."
                echo "::set-output name=latest_status::$latest_status"
                exit 0
            elif [ "$latest_status" == "update_failed" ]; then
                echo "Deploy failed."
                exit 1
            else
                echo "Deploy is in status: $latest_status Waiting for 30 seconds..."
                sleep 30
            fi
          done
      
          echo "Deployment did not complete in the expected time."
          exit 1  # Если все попытки исчерпаны, завершаем с ошибкой
  
        

      - name: Finish if deployment was successful
        if: ${{ steps.check-deploy-status.outputs.latest_status == 'live' }}
        run: echo "Deployment completed successfully!"
